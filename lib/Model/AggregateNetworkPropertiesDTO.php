<?php
/**
 * AggregateNetworkPropertiesDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SymbolRestClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SymbolRestClient\Model;

use \ArrayAccess;
use \SymbolRestClient\ObjectSerializer;

/**
 * AggregateNetworkPropertiesDTO Class Doc Comment
 *
 * @category Class
 * @package  SymbolRestClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AggregateNetworkPropertiesDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AggregateNetworkPropertiesDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'max_transactions_per_aggregate' => 'string',
        'max_cosignatures_per_aggregate' => 'string',
        'enable_strict_cosignature_check' => 'bool',
        'enable_bonded_aggregate_support' => 'bool',
        'max_bonded_transaction_lifetime' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'max_transactions_per_aggregate' => null,
        'max_cosignatures_per_aggregate' => null,
        'enable_strict_cosignature_check' => null,
        'enable_bonded_aggregate_support' => null,
        'max_bonded_transaction_lifetime' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'max_transactions_per_aggregate' => false,
        'max_cosignatures_per_aggregate' => false,
        'enable_strict_cosignature_check' => false,
        'enable_bonded_aggregate_support' => false,
        'max_bonded_transaction_lifetime' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'max_transactions_per_aggregate' => 'maxTransactionsPerAggregate',
        'max_cosignatures_per_aggregate' => 'maxCosignaturesPerAggregate',
        'enable_strict_cosignature_check' => 'enableStrictCosignatureCheck',
        'enable_bonded_aggregate_support' => 'enableBondedAggregateSupport',
        'max_bonded_transaction_lifetime' => 'maxBondedTransactionLifetime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'max_transactions_per_aggregate' => 'setMaxTransactionsPerAggregate',
        'max_cosignatures_per_aggregate' => 'setMaxCosignaturesPerAggregate',
        'enable_strict_cosignature_check' => 'setEnableStrictCosignatureCheck',
        'enable_bonded_aggregate_support' => 'setEnableBondedAggregateSupport',
        'max_bonded_transaction_lifetime' => 'setMaxBondedTransactionLifetime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'max_transactions_per_aggregate' => 'getMaxTransactionsPerAggregate',
        'max_cosignatures_per_aggregate' => 'getMaxCosignaturesPerAggregate',
        'enable_strict_cosignature_check' => 'getEnableStrictCosignatureCheck',
        'enable_bonded_aggregate_support' => 'getEnableBondedAggregateSupport',
        'max_bonded_transaction_lifetime' => 'getMaxBondedTransactionLifetime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('max_transactions_per_aggregate', $data ?? [], null);
        $this->setIfExists('max_cosignatures_per_aggregate', $data ?? [], null);
        $this->setIfExists('enable_strict_cosignature_check', $data ?? [], null);
        $this->setIfExists('enable_bonded_aggregate_support', $data ?? [], null);
        $this->setIfExists('max_bonded_transaction_lifetime', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets max_transactions_per_aggregate
     *
     * @return string|null
     */
    public function getMaxTransactionsPerAggregate()
    {
        return $this->container['max_transactions_per_aggregate'];
    }

    /**
     * Sets max_transactions_per_aggregate
     *
     * @param string|null $max_transactions_per_aggregate Maximum number of transactions per aggregate.
     *
     * @return self
     */
    public function setMaxTransactionsPerAggregate($max_transactions_per_aggregate)
    {
        if (is_null($max_transactions_per_aggregate)) {
            throw new \InvalidArgumentException('non-nullable max_transactions_per_aggregate cannot be null');
        }
        $this->container['max_transactions_per_aggregate'] = $max_transactions_per_aggregate;

        return $this;
    }

    /**
     * Gets max_cosignatures_per_aggregate
     *
     * @return string|null
     */
    public function getMaxCosignaturesPerAggregate()
    {
        return $this->container['max_cosignatures_per_aggregate'];
    }

    /**
     * Sets max_cosignatures_per_aggregate
     *
     * @param string|null $max_cosignatures_per_aggregate Maximum number of cosignatures per aggregate.
     *
     * @return self
     */
    public function setMaxCosignaturesPerAggregate($max_cosignatures_per_aggregate)
    {
        if (is_null($max_cosignatures_per_aggregate)) {
            throw new \InvalidArgumentException('non-nullable max_cosignatures_per_aggregate cannot be null');
        }
        $this->container['max_cosignatures_per_aggregate'] = $max_cosignatures_per_aggregate;

        return $this;
    }

    /**
     * Gets enable_strict_cosignature_check
     *
     * @return bool|null
     */
    public function getEnableStrictCosignatureCheck()
    {
        return $this->container['enable_strict_cosignature_check'];
    }

    /**
     * Sets enable_strict_cosignature_check
     *
     * @param bool|null $enable_strict_cosignature_check Set to true if cosignatures must exactly match component signers. Set to false if cosignatures should be validated externally.
     *
     * @return self
     */
    public function setEnableStrictCosignatureCheck($enable_strict_cosignature_check)
    {
        if (is_null($enable_strict_cosignature_check)) {
            throw new \InvalidArgumentException('non-nullable enable_strict_cosignature_check cannot be null');
        }
        $this->container['enable_strict_cosignature_check'] = $enable_strict_cosignature_check;

        return $this;
    }

    /**
     * Gets enable_bonded_aggregate_support
     *
     * @return bool|null
     */
    public function getEnableBondedAggregateSupport()
    {
        return $this->container['enable_bonded_aggregate_support'];
    }

    /**
     * Sets enable_bonded_aggregate_support
     *
     * @param bool|null $enable_bonded_aggregate_support Set to true if bonded aggregates should be allowed. Set to false if bonded aggregates should be rejected.
     *
     * @return self
     */
    public function setEnableBondedAggregateSupport($enable_bonded_aggregate_support)
    {
        if (is_null($enable_bonded_aggregate_support)) {
            throw new \InvalidArgumentException('non-nullable enable_bonded_aggregate_support cannot be null');
        }
        $this->container['enable_bonded_aggregate_support'] = $enable_bonded_aggregate_support;

        return $this;
    }

    /**
     * Gets max_bonded_transaction_lifetime
     *
     * @return string|null
     */
    public function getMaxBondedTransactionLifetime()
    {
        return $this->container['max_bonded_transaction_lifetime'];
    }

    /**
     * Sets max_bonded_transaction_lifetime
     *
     * @param string|null $max_bonded_transaction_lifetime Maximum lifetime a bonded transaction can have before it expires.
     *
     * @return self
     */
    public function setMaxBondedTransactionLifetime($max_bonded_transaction_lifetime)
    {
        if (is_null($max_bonded_transaction_lifetime)) {
            throw new \InvalidArgumentException('non-nullable max_bonded_transaction_lifetime cannot be null');
        }
        $this->container['max_bonded_transaction_lifetime'] = $max_bonded_transaction_lifetime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


