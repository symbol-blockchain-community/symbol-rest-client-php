<?php
/**
 * BlockInfoDTOBlock
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SymbolRestClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SymbolRestClient\Model;

use \ArrayAccess;
use \SymbolRestClient\ObjectSerializer;

/**
 * BlockInfoDTOBlock Class Doc Comment
 *
 * @category Class
 * @package  SymbolRestClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BlockInfoDTOBlock implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BlockInfoDTO_block';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'size' => 'int',
        'signature' => 'string',
        'signer_public_key' => 'string',
        'version' => 'int',
        'network' => '\SymbolRestClient\Model\NetworkTypeEnum',
        'type' => 'int',
        'height' => 'string',
        'timestamp' => 'string',
        'difficulty' => 'string',
        'proof_gamma' => 'string',
        'proof_verification_hash' => 'string',
        'proof_scalar' => 'string',
        'previous_block_hash' => 'string',
        'transactions_hash' => 'string',
        'receipts_hash' => 'string',
        'state_hash' => 'string',
        'beneficiary_address' => 'string',
        'fee_multiplier' => 'int',
        'voting_eligible_accounts_count' => 'int',
        'harvesting_eligible_accounts_count' => 'string',
        'total_voting_balance' => 'string',
        'previous_importance_block_hash' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'size' => 'int64',
        'signature' => null,
        'signer_public_key' => 'hex',
        'version' => null,
        'network' => null,
        'type' => null,
        'height' => null,
        'timestamp' => null,
        'difficulty' => null,
        'proof_gamma' => 'hex',
        'proof_verification_hash' => 'hex',
        'proof_scalar' => 'hex',
        'previous_block_hash' => 'hex',
        'transactions_hash' => 'hex',
        'receipts_hash' => 'hex',
        'state_hash' => 'hex',
        'beneficiary_address' => null,
        'fee_multiplier' => 'int64',
        'voting_eligible_accounts_count' => 'int64',
        'harvesting_eligible_accounts_count' => null,
        'total_voting_balance' => null,
        'previous_importance_block_hash' => 'hex'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'size' => false,
        'signature' => false,
        'signer_public_key' => false,
        'version' => false,
        'network' => false,
        'type' => false,
        'height' => false,
        'timestamp' => false,
        'difficulty' => false,
        'proof_gamma' => false,
        'proof_verification_hash' => false,
        'proof_scalar' => false,
        'previous_block_hash' => false,
        'transactions_hash' => false,
        'receipts_hash' => false,
        'state_hash' => false,
        'beneficiary_address' => false,
        'fee_multiplier' => false,
        'voting_eligible_accounts_count' => false,
        'harvesting_eligible_accounts_count' => false,
        'total_voting_balance' => false,
        'previous_importance_block_hash' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'size' => 'size',
        'signature' => 'signature',
        'signer_public_key' => 'signerPublicKey',
        'version' => 'version',
        'network' => 'network',
        'type' => 'type',
        'height' => 'height',
        'timestamp' => 'timestamp',
        'difficulty' => 'difficulty',
        'proof_gamma' => 'proofGamma',
        'proof_verification_hash' => 'proofVerificationHash',
        'proof_scalar' => 'proofScalar',
        'previous_block_hash' => 'previousBlockHash',
        'transactions_hash' => 'transactionsHash',
        'receipts_hash' => 'receiptsHash',
        'state_hash' => 'stateHash',
        'beneficiary_address' => 'beneficiaryAddress',
        'fee_multiplier' => 'feeMultiplier',
        'voting_eligible_accounts_count' => 'votingEligibleAccountsCount',
        'harvesting_eligible_accounts_count' => 'harvestingEligibleAccountsCount',
        'total_voting_balance' => 'totalVotingBalance',
        'previous_importance_block_hash' => 'previousImportanceBlockHash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'size' => 'setSize',
        'signature' => 'setSignature',
        'signer_public_key' => 'setSignerPublicKey',
        'version' => 'setVersion',
        'network' => 'setNetwork',
        'type' => 'setType',
        'height' => 'setHeight',
        'timestamp' => 'setTimestamp',
        'difficulty' => 'setDifficulty',
        'proof_gamma' => 'setProofGamma',
        'proof_verification_hash' => 'setProofVerificationHash',
        'proof_scalar' => 'setProofScalar',
        'previous_block_hash' => 'setPreviousBlockHash',
        'transactions_hash' => 'setTransactionsHash',
        'receipts_hash' => 'setReceiptsHash',
        'state_hash' => 'setStateHash',
        'beneficiary_address' => 'setBeneficiaryAddress',
        'fee_multiplier' => 'setFeeMultiplier',
        'voting_eligible_accounts_count' => 'setVotingEligibleAccountsCount',
        'harvesting_eligible_accounts_count' => 'setHarvestingEligibleAccountsCount',
        'total_voting_balance' => 'setTotalVotingBalance',
        'previous_importance_block_hash' => 'setPreviousImportanceBlockHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'size' => 'getSize',
        'signature' => 'getSignature',
        'signer_public_key' => 'getSignerPublicKey',
        'version' => 'getVersion',
        'network' => 'getNetwork',
        'type' => 'getType',
        'height' => 'getHeight',
        'timestamp' => 'getTimestamp',
        'difficulty' => 'getDifficulty',
        'proof_gamma' => 'getProofGamma',
        'proof_verification_hash' => 'getProofVerificationHash',
        'proof_scalar' => 'getProofScalar',
        'previous_block_hash' => 'getPreviousBlockHash',
        'transactions_hash' => 'getTransactionsHash',
        'receipts_hash' => 'getReceiptsHash',
        'state_hash' => 'getStateHash',
        'beneficiary_address' => 'getBeneficiaryAddress',
        'fee_multiplier' => 'getFeeMultiplier',
        'voting_eligible_accounts_count' => 'getVotingEligibleAccountsCount',
        'harvesting_eligible_accounts_count' => 'getHarvestingEligibleAccountsCount',
        'total_voting_balance' => 'getTotalVotingBalance',
        'previous_importance_block_hash' => 'getPreviousImportanceBlockHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('signature', $data ?? [], null);
        $this->setIfExists('signer_public_key', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('network', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('difficulty', $data ?? [], null);
        $this->setIfExists('proof_gamma', $data ?? [], null);
        $this->setIfExists('proof_verification_hash', $data ?? [], null);
        $this->setIfExists('proof_scalar', $data ?? [], null);
        $this->setIfExists('previous_block_hash', $data ?? [], null);
        $this->setIfExists('transactions_hash', $data ?? [], null);
        $this->setIfExists('receipts_hash', $data ?? [], null);
        $this->setIfExists('state_hash', $data ?? [], null);
        $this->setIfExists('beneficiary_address', $data ?? [], null);
        $this->setIfExists('fee_multiplier', $data ?? [], null);
        $this->setIfExists('voting_eligible_accounts_count', $data ?? [], null);
        $this->setIfExists('harvesting_eligible_accounts_count', $data ?? [], null);
        $this->setIfExists('total_voting_balance', $data ?? [], null);
        $this->setIfExists('previous_importance_block_hash', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if ($this->container['signature'] === null) {
            $invalidProperties[] = "'signature' can't be null";
        }
        if ($this->container['signer_public_key'] === null) {
            $invalidProperties[] = "'signer_public_key' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['network'] === null) {
            $invalidProperties[] = "'network' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['height'] === null) {
            $invalidProperties[] = "'height' can't be null";
        }
        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        if ($this->container['difficulty'] === null) {
            $invalidProperties[] = "'difficulty' can't be null";
        }
        if ($this->container['proof_gamma'] === null) {
            $invalidProperties[] = "'proof_gamma' can't be null";
        }
        if ($this->container['proof_verification_hash'] === null) {
            $invalidProperties[] = "'proof_verification_hash' can't be null";
        }
        if ($this->container['proof_scalar'] === null) {
            $invalidProperties[] = "'proof_scalar' can't be null";
        }
        if ($this->container['previous_block_hash'] === null) {
            $invalidProperties[] = "'previous_block_hash' can't be null";
        }
        if ($this->container['transactions_hash'] === null) {
            $invalidProperties[] = "'transactions_hash' can't be null";
        }
        if ($this->container['receipts_hash'] === null) {
            $invalidProperties[] = "'receipts_hash' can't be null";
        }
        if ($this->container['state_hash'] === null) {
            $invalidProperties[] = "'state_hash' can't be null";
        }
        if ($this->container['beneficiary_address'] === null) {
            $invalidProperties[] = "'beneficiary_address' can't be null";
        }
        if ($this->container['fee_multiplier'] === null) {
            $invalidProperties[] = "'fee_multiplier' can't be null";
        }
        if ($this->container['voting_eligible_accounts_count'] === null) {
            $invalidProperties[] = "'voting_eligible_accounts_count' can't be null";
        }
        if ($this->container['harvesting_eligible_accounts_count'] === null) {
            $invalidProperties[] = "'harvesting_eligible_accounts_count' can't be null";
        }
        if ($this->container['total_voting_balance'] === null) {
            $invalidProperties[] = "'total_voting_balance' can't be null";
        }
        if ($this->container['previous_importance_block_hash'] === null) {
            $invalidProperties[] = "'previous_importance_block_hash' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size A number that allows uint 32 values.
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param string $signature Entity's signature generated by the signer.
     *
     * @return self
     */
    public function setSignature($signature)
    {
        if (is_null($signature)) {
            throw new \InvalidArgumentException('non-nullable signature cannot be null');
        }
        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets signer_public_key
     *
     * @return string
     */
    public function getSignerPublicKey()
    {
        return $this->container['signer_public_key'];
    }

    /**
     * Sets signer_public_key
     *
     * @param string $signer_public_key Public key.
     *
     * @return self
     */
    public function setSignerPublicKey($signer_public_key)
    {
        if (is_null($signer_public_key)) {
            throw new \InvalidArgumentException('non-nullable signer_public_key cannot be null');
        }
        $this->container['signer_public_key'] = $signer_public_key;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version Entity version.
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets network
     *
     * @return \SymbolRestClient\Model\NetworkTypeEnum
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param \SymbolRestClient\Model\NetworkTypeEnum $network network
     *
     * @return self
     */
    public function setNetwork($network)
    {
        if (is_null($network)) {
            throw new \InvalidArgumentException('non-nullable network cannot be null');
        }
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets height
     *
     * @return string
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param string $height Height of the blockchain.
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string $timestamp Number of milliseconds elapsed since the creation of the nemesis block. This value can be converted to epoch time by adding the network's 'epochAdjustment'.
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets difficulty
     *
     * @return string
     */
    public function getDifficulty()
    {
        return $this->container['difficulty'];
    }

    /**
     * Sets difficulty
     *
     * @param string $difficulty Determines how hard is to harvest a new block, based on previous blocks.
     *
     * @return self
     */
    public function setDifficulty($difficulty)
    {
        if (is_null($difficulty)) {
            throw new \InvalidArgumentException('non-nullable difficulty cannot be null');
        }
        $this->container['difficulty'] = $difficulty;

        return $this;
    }

    /**
     * Gets proof_gamma
     *
     * @return string
     */
    public function getProofGamma()
    {
        return $this->container['proof_gamma'];
    }

    /**
     * Sets proof_gamma
     *
     * @param string $proof_gamma 32-bytes VRF proof gamma.
     *
     * @return self
     */
    public function setProofGamma($proof_gamma)
    {
        if (is_null($proof_gamma)) {
            throw new \InvalidArgumentException('non-nullable proof_gamma cannot be null');
        }
        $this->container['proof_gamma'] = $proof_gamma;

        return $this;
    }

    /**
     * Gets proof_verification_hash
     *
     * @return string
     */
    public function getProofVerificationHash()
    {
        return $this->container['proof_verification_hash'];
    }

    /**
     * Sets proof_verification_hash
     *
     * @param string $proof_verification_hash 16-bytes VRF proof verification hash.
     *
     * @return self
     */
    public function setProofVerificationHash($proof_verification_hash)
    {
        if (is_null($proof_verification_hash)) {
            throw new \InvalidArgumentException('non-nullable proof_verification_hash cannot be null');
        }
        $this->container['proof_verification_hash'] = $proof_verification_hash;

        return $this;
    }

    /**
     * Gets proof_scalar
     *
     * @return string
     */
    public function getProofScalar()
    {
        return $this->container['proof_scalar'];
    }

    /**
     * Sets proof_scalar
     *
     * @param string $proof_scalar 32-bytes VRF proof scalar.
     *
     * @return self
     */
    public function setProofScalar($proof_scalar)
    {
        if (is_null($proof_scalar)) {
            throw new \InvalidArgumentException('non-nullable proof_scalar cannot be null');
        }
        $this->container['proof_scalar'] = $proof_scalar;

        return $this;
    }

    /**
     * Gets previous_block_hash
     *
     * @return string
     */
    public function getPreviousBlockHash()
    {
        return $this->container['previous_block_hash'];
    }

    /**
     * Sets previous_block_hash
     *
     * @param string $previous_block_hash previous_block_hash
     *
     * @return self
     */
    public function setPreviousBlockHash($previous_block_hash)
    {
        if (is_null($previous_block_hash)) {
            throw new \InvalidArgumentException('non-nullable previous_block_hash cannot be null');
        }
        $this->container['previous_block_hash'] = $previous_block_hash;

        return $this;
    }

    /**
     * Gets transactions_hash
     *
     * @return string
     */
    public function getTransactionsHash()
    {
        return $this->container['transactions_hash'];
    }

    /**
     * Sets transactions_hash
     *
     * @param string $transactions_hash transactions_hash
     *
     * @return self
     */
    public function setTransactionsHash($transactions_hash)
    {
        if (is_null($transactions_hash)) {
            throw new \InvalidArgumentException('non-nullable transactions_hash cannot be null');
        }
        $this->container['transactions_hash'] = $transactions_hash;

        return $this;
    }

    /**
     * Gets receipts_hash
     *
     * @return string
     */
    public function getReceiptsHash()
    {
        return $this->container['receipts_hash'];
    }

    /**
     * Sets receipts_hash
     *
     * @param string $receipts_hash receipts_hash
     *
     * @return self
     */
    public function setReceiptsHash($receipts_hash)
    {
        if (is_null($receipts_hash)) {
            throw new \InvalidArgumentException('non-nullable receipts_hash cannot be null');
        }
        $this->container['receipts_hash'] = $receipts_hash;

        return $this;
    }

    /**
     * Gets state_hash
     *
     * @return string
     */
    public function getStateHash()
    {
        return $this->container['state_hash'];
    }

    /**
     * Sets state_hash
     *
     * @param string $state_hash state_hash
     *
     * @return self
     */
    public function setStateHash($state_hash)
    {
        if (is_null($state_hash)) {
            throw new \InvalidArgumentException('non-nullable state_hash cannot be null');
        }
        $this->container['state_hash'] = $state_hash;

        return $this;
    }

    /**
     * Gets beneficiary_address
     *
     * @return string
     */
    public function getBeneficiaryAddress()
    {
        return $this->container['beneficiary_address'];
    }

    /**
     * Sets beneficiary_address
     *
     * @param string $beneficiary_address Address encoded using a 32-character set.
     *
     * @return self
     */
    public function setBeneficiaryAddress($beneficiary_address)
    {
        if (is_null($beneficiary_address)) {
            throw new \InvalidArgumentException('non-nullable beneficiary_address cannot be null');
        }
        $this->container['beneficiary_address'] = $beneficiary_address;

        return $this;
    }

    /**
     * Gets fee_multiplier
     *
     * @return int
     */
    public function getFeeMultiplier()
    {
        return $this->container['fee_multiplier'];
    }

    /**
     * Sets fee_multiplier
     *
     * @param int $fee_multiplier Fee multiplier applied to transactions contained in block.
     *
     * @return self
     */
    public function setFeeMultiplier($fee_multiplier)
    {
        if (is_null($fee_multiplier)) {
            throw new \InvalidArgumentException('non-nullable fee_multiplier cannot be null');
        }
        $this->container['fee_multiplier'] = $fee_multiplier;

        return $this;
    }

    /**
     * Gets voting_eligible_accounts_count
     *
     * @return int
     */
    public function getVotingEligibleAccountsCount()
    {
        return $this->container['voting_eligible_accounts_count'];
    }

    /**
     * Sets voting_eligible_accounts_count
     *
     * @param int $voting_eligible_accounts_count A number that allows uint 32 values.
     *
     * @return self
     */
    public function setVotingEligibleAccountsCount($voting_eligible_accounts_count)
    {
        if (is_null($voting_eligible_accounts_count)) {
            throw new \InvalidArgumentException('non-nullable voting_eligible_accounts_count cannot be null');
        }
        $this->container['voting_eligible_accounts_count'] = $voting_eligible_accounts_count;

        return $this;
    }

    /**
     * Gets harvesting_eligible_accounts_count
     *
     * @return string
     */
    public function getHarvestingEligibleAccountsCount()
    {
        return $this->container['harvesting_eligible_accounts_count'];
    }

    /**
     * Sets harvesting_eligible_accounts_count
     *
     * @param string $harvesting_eligible_accounts_count A number that allows uint 64 values represented with a string.
     *
     * @return self
     */
    public function setHarvestingEligibleAccountsCount($harvesting_eligible_accounts_count)
    {
        if (is_null($harvesting_eligible_accounts_count)) {
            throw new \InvalidArgumentException('non-nullable harvesting_eligible_accounts_count cannot be null');
        }
        $this->container['harvesting_eligible_accounts_count'] = $harvesting_eligible_accounts_count;

        return $this;
    }

    /**
     * Gets total_voting_balance
     *
     * @return string
     */
    public function getTotalVotingBalance()
    {
        return $this->container['total_voting_balance'];
    }

    /**
     * Sets total_voting_balance
     *
     * @param string $total_voting_balance Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).
     *
     * @return self
     */
    public function setTotalVotingBalance($total_voting_balance)
    {
        if (is_null($total_voting_balance)) {
            throw new \InvalidArgumentException('non-nullable total_voting_balance cannot be null');
        }
        $this->container['total_voting_balance'] = $total_voting_balance;

        return $this;
    }

    /**
     * Gets previous_importance_block_hash
     *
     * @return string
     */
    public function getPreviousImportanceBlockHash()
    {
        return $this->container['previous_importance_block_hash'];
    }

    /**
     * Sets previous_importance_block_hash
     *
     * @param string $previous_importance_block_hash previous_importance_block_hash
     *
     * @return self
     */
    public function setPreviousImportanceBlockHash($previous_importance_block_hash)
    {
        if (is_null($previous_importance_block_hash)) {
            throw new \InvalidArgumentException('non-nullable previous_importance_block_hash cannot be null');
        }
        $this->container['previous_importance_block_hash'] = $previous_importance_block_hash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


