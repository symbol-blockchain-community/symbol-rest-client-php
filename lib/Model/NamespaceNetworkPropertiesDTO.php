<?php
/**
 * NamespaceNetworkPropertiesDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SymbolRestClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SymbolRestClient\Model;

use \ArrayAccess;
use \SymbolRestClient\ObjectSerializer;

/**
 * NamespaceNetworkPropertiesDTO Class Doc Comment
 *
 * @category Class
 * @package  SymbolRestClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NamespaceNetworkPropertiesDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NamespaceNetworkPropertiesDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'max_name_size' => 'string',
        'max_child_namespaces' => 'string',
        'max_namespace_depth' => 'string',
        'min_namespace_duration' => 'string',
        'max_namespace_duration' => 'string',
        'namespace_grace_period_duration' => 'string',
        'reserved_root_namespace_names' => 'string',
        'namespace_rental_fee_sink_address' => 'string',
        'root_namespace_rental_fee_per_block' => 'string',
        'child_namespace_rental_fee' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'max_name_size' => null,
        'max_child_namespaces' => null,
        'max_namespace_depth' => null,
        'min_namespace_duration' => null,
        'max_namespace_duration' => null,
        'namespace_grace_period_duration' => null,
        'reserved_root_namespace_names' => null,
        'namespace_rental_fee_sink_address' => null,
        'root_namespace_rental_fee_per_block' => null,
        'child_namespace_rental_fee' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'max_name_size' => false,
        'max_child_namespaces' => false,
        'max_namespace_depth' => false,
        'min_namespace_duration' => false,
        'max_namespace_duration' => false,
        'namespace_grace_period_duration' => false,
        'reserved_root_namespace_names' => false,
        'namespace_rental_fee_sink_address' => false,
        'root_namespace_rental_fee_per_block' => false,
        'child_namespace_rental_fee' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'max_name_size' => 'maxNameSize',
        'max_child_namespaces' => 'maxChildNamespaces',
        'max_namespace_depth' => 'maxNamespaceDepth',
        'min_namespace_duration' => 'minNamespaceDuration',
        'max_namespace_duration' => 'maxNamespaceDuration',
        'namespace_grace_period_duration' => 'namespaceGracePeriodDuration',
        'reserved_root_namespace_names' => 'reservedRootNamespaceNames',
        'namespace_rental_fee_sink_address' => 'namespaceRentalFeeSinkAddress',
        'root_namespace_rental_fee_per_block' => 'rootNamespaceRentalFeePerBlock',
        'child_namespace_rental_fee' => 'childNamespaceRentalFee'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'max_name_size' => 'setMaxNameSize',
        'max_child_namespaces' => 'setMaxChildNamespaces',
        'max_namespace_depth' => 'setMaxNamespaceDepth',
        'min_namespace_duration' => 'setMinNamespaceDuration',
        'max_namespace_duration' => 'setMaxNamespaceDuration',
        'namespace_grace_period_duration' => 'setNamespaceGracePeriodDuration',
        'reserved_root_namespace_names' => 'setReservedRootNamespaceNames',
        'namespace_rental_fee_sink_address' => 'setNamespaceRentalFeeSinkAddress',
        'root_namespace_rental_fee_per_block' => 'setRootNamespaceRentalFeePerBlock',
        'child_namespace_rental_fee' => 'setChildNamespaceRentalFee'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'max_name_size' => 'getMaxNameSize',
        'max_child_namespaces' => 'getMaxChildNamespaces',
        'max_namespace_depth' => 'getMaxNamespaceDepth',
        'min_namespace_duration' => 'getMinNamespaceDuration',
        'max_namespace_duration' => 'getMaxNamespaceDuration',
        'namespace_grace_period_duration' => 'getNamespaceGracePeriodDuration',
        'reserved_root_namespace_names' => 'getReservedRootNamespaceNames',
        'namespace_rental_fee_sink_address' => 'getNamespaceRentalFeeSinkAddress',
        'root_namespace_rental_fee_per_block' => 'getRootNamespaceRentalFeePerBlock',
        'child_namespace_rental_fee' => 'getChildNamespaceRentalFee'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('max_name_size', $data ?? [], null);
        $this->setIfExists('max_child_namespaces', $data ?? [], null);
        $this->setIfExists('max_namespace_depth', $data ?? [], null);
        $this->setIfExists('min_namespace_duration', $data ?? [], null);
        $this->setIfExists('max_namespace_duration', $data ?? [], null);
        $this->setIfExists('namespace_grace_period_duration', $data ?? [], null);
        $this->setIfExists('reserved_root_namespace_names', $data ?? [], null);
        $this->setIfExists('namespace_rental_fee_sink_address', $data ?? [], null);
        $this->setIfExists('root_namespace_rental_fee_per_block', $data ?? [], null);
        $this->setIfExists('child_namespace_rental_fee', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets max_name_size
     *
     * @return string|null
     */
    public function getMaxNameSize()
    {
        return $this->container['max_name_size'];
    }

    /**
     * Sets max_name_size
     *
     * @param string|null $max_name_size Maximum namespace name size.
     *
     * @return self
     */
    public function setMaxNameSize($max_name_size)
    {
        if (is_null($max_name_size)) {
            throw new \InvalidArgumentException('non-nullable max_name_size cannot be null');
        }
        $this->container['max_name_size'] = $max_name_size;

        return $this;
    }

    /**
     * Gets max_child_namespaces
     *
     * @return string|null
     */
    public function getMaxChildNamespaces()
    {
        return $this->container['max_child_namespaces'];
    }

    /**
     * Sets max_child_namespaces
     *
     * @param string|null $max_child_namespaces Maximum number of children for a root namespace.
     *
     * @return self
     */
    public function setMaxChildNamespaces($max_child_namespaces)
    {
        if (is_null($max_child_namespaces)) {
            throw new \InvalidArgumentException('non-nullable max_child_namespaces cannot be null');
        }
        $this->container['max_child_namespaces'] = $max_child_namespaces;

        return $this;
    }

    /**
     * Gets max_namespace_depth
     *
     * @return string|null
     */
    public function getMaxNamespaceDepth()
    {
        return $this->container['max_namespace_depth'];
    }

    /**
     * Sets max_namespace_depth
     *
     * @param string|null $max_namespace_depth Maximum namespace depth.
     *
     * @return self
     */
    public function setMaxNamespaceDepth($max_namespace_depth)
    {
        if (is_null($max_namespace_depth)) {
            throw new \InvalidArgumentException('non-nullable max_namespace_depth cannot be null');
        }
        $this->container['max_namespace_depth'] = $max_namespace_depth;

        return $this;
    }

    /**
     * Gets min_namespace_duration
     *
     * @return string|null
     */
    public function getMinNamespaceDuration()
    {
        return $this->container['min_namespace_duration'];
    }

    /**
     * Sets min_namespace_duration
     *
     * @param string|null $min_namespace_duration Minimum namespace duration.
     *
     * @return self
     */
    public function setMinNamespaceDuration($min_namespace_duration)
    {
        if (is_null($min_namespace_duration)) {
            throw new \InvalidArgumentException('non-nullable min_namespace_duration cannot be null');
        }
        $this->container['min_namespace_duration'] = $min_namespace_duration;

        return $this;
    }

    /**
     * Gets max_namespace_duration
     *
     * @return string|null
     */
    public function getMaxNamespaceDuration()
    {
        return $this->container['max_namespace_duration'];
    }

    /**
     * Sets max_namespace_duration
     *
     * @param string|null $max_namespace_duration Maximum namespace duration.
     *
     * @return self
     */
    public function setMaxNamespaceDuration($max_namespace_duration)
    {
        if (is_null($max_namespace_duration)) {
            throw new \InvalidArgumentException('non-nullable max_namespace_duration cannot be null');
        }
        $this->container['max_namespace_duration'] = $max_namespace_duration;

        return $this;
    }

    /**
     * Gets namespace_grace_period_duration
     *
     * @return string|null
     */
    public function getNamespaceGracePeriodDuration()
    {
        return $this->container['namespace_grace_period_duration'];
    }

    /**
     * Sets namespace_grace_period_duration
     *
     * @param string|null $namespace_grace_period_duration Grace period during which time only the previous owner can renew an expired namespace.
     *
     * @return self
     */
    public function setNamespaceGracePeriodDuration($namespace_grace_period_duration)
    {
        if (is_null($namespace_grace_period_duration)) {
            throw new \InvalidArgumentException('non-nullable namespace_grace_period_duration cannot be null');
        }
        $this->container['namespace_grace_period_duration'] = $namespace_grace_period_duration;

        return $this;
    }

    /**
     * Gets reserved_root_namespace_names
     *
     * @return string|null
     */
    public function getReservedRootNamespaceNames()
    {
        return $this->container['reserved_root_namespace_names'];
    }

    /**
     * Sets reserved_root_namespace_names
     *
     * @param string|null $reserved_root_namespace_names Reserved root namespaces that cannot be claimed.
     *
     * @return self
     */
    public function setReservedRootNamespaceNames($reserved_root_namespace_names)
    {
        if (is_null($reserved_root_namespace_names)) {
            throw new \InvalidArgumentException('non-nullable reserved_root_namespace_names cannot be null');
        }
        $this->container['reserved_root_namespace_names'] = $reserved_root_namespace_names;

        return $this;
    }

    /**
     * Gets namespace_rental_fee_sink_address
     *
     * @return string|null
     */
    public function getNamespaceRentalFeeSinkAddress()
    {
        return $this->container['namespace_rental_fee_sink_address'];
    }

    /**
     * Sets namespace_rental_fee_sink_address
     *
     * @param string|null $namespace_rental_fee_sink_address Address encoded using a 32-character set.
     *
     * @return self
     */
    public function setNamespaceRentalFeeSinkAddress($namespace_rental_fee_sink_address)
    {
        if (is_null($namespace_rental_fee_sink_address)) {
            throw new \InvalidArgumentException('non-nullable namespace_rental_fee_sink_address cannot be null');
        }
        $this->container['namespace_rental_fee_sink_address'] = $namespace_rental_fee_sink_address;

        return $this;
    }

    /**
     * Gets root_namespace_rental_fee_per_block
     *
     * @return string|null
     */
    public function getRootNamespaceRentalFeePerBlock()
    {
        return $this->container['root_namespace_rental_fee_per_block'];
    }

    /**
     * Sets root_namespace_rental_fee_per_block
     *
     * @param string|null $root_namespace_rental_fee_per_block Root namespace rental fee per block.
     *
     * @return self
     */
    public function setRootNamespaceRentalFeePerBlock($root_namespace_rental_fee_per_block)
    {
        if (is_null($root_namespace_rental_fee_per_block)) {
            throw new \InvalidArgumentException('non-nullable root_namespace_rental_fee_per_block cannot be null');
        }
        $this->container['root_namespace_rental_fee_per_block'] = $root_namespace_rental_fee_per_block;

        return $this;
    }

    /**
     * Gets child_namespace_rental_fee
     *
     * @return string|null
     */
    public function getChildNamespaceRentalFee()
    {
        return $this->container['child_namespace_rental_fee'];
    }

    /**
     * Sets child_namespace_rental_fee
     *
     * @param string|null $child_namespace_rental_fee Child namespace rental fee.
     *
     * @return self
     */
    public function setChildNamespaceRentalFee($child_namespace_rental_fee)
    {
        if (is_null($child_namespace_rental_fee)) {
            throw new \InvalidArgumentException('non-nullable child_namespace_rental_fee cannot be null');
        }
        $this->container['child_namespace_rental_fee'] = $child_namespace_rental_fee;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


