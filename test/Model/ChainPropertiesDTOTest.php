<?php
/**
 * ChainPropertiesDTOTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SymbolRestClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace SymbolRestClient\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * ChainPropertiesDTOTest Class Doc Comment
 *
 * @category    Class
 * @description Chain related configuration properties.
 * @package     SymbolRestClient
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class ChainPropertiesDTOTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "ChainPropertiesDTO"
     */
    public function testChainPropertiesDTO()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_verifiable_state"
     */
    public function testPropertyEnableVerifiableState()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enable_verifiable_receipts"
     */
    public function testPropertyEnableVerifiableReceipts()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "currency_mosaic_id"
     */
    public function testPropertyCurrencyMosaicId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "harvesting_mosaic_id"
     */
    public function testPropertyHarvestingMosaicId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "block_generation_target_time"
     */
    public function testPropertyBlockGenerationTargetTime()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "block_time_smoothing_factor"
     */
    public function testPropertyBlockTimeSmoothingFactor()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "block_finalization_interval"
     */
    public function testPropertyBlockFinalizationInterval()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "importance_grouping"
     */
    public function testPropertyImportanceGrouping()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "importance_activity_percentage"
     */
    public function testPropertyImportanceActivityPercentage()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_rollback_blocks"
     */
    public function testPropertyMaxRollbackBlocks()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_difficulty_blocks"
     */
    public function testPropertyMaxDifficultyBlocks()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "default_dynamic_fee_multiplier"
     */
    public function testPropertyDefaultDynamicFeeMultiplier()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_transaction_lifetime"
     */
    public function testPropertyMaxTransactionLifetime()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_block_future_time"
     */
    public function testPropertyMaxBlockFutureTime()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "initial_currency_atomic_units"
     */
    public function testPropertyInitialCurrencyAtomicUnits()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_mosaic_atomic_units"
     */
    public function testPropertyMaxMosaicAtomicUnits()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "total_chain_importance"
     */
    public function testPropertyTotalChainImportance()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "min_harvester_balance"
     */
    public function testPropertyMinHarvesterBalance()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_harvester_balance"
     */
    public function testPropertyMaxHarvesterBalance()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "min_voter_balance"
     */
    public function testPropertyMinVoterBalance()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_voting_keys_per_account"
     */
    public function testPropertyMaxVotingKeysPerAccount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "min_voting_key_lifetime"
     */
    public function testPropertyMinVotingKeyLifetime()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_voting_key_lifetime"
     */
    public function testPropertyMaxVotingKeyLifetime()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "harvest_beneficiary_percentage"
     */
    public function testPropertyHarvestBeneficiaryPercentage()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "harvest_network_percentage"
     */
    public function testPropertyHarvestNetworkPercentage()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "harvest_network_fee_sink_address"
     */
    public function testPropertyHarvestNetworkFeeSinkAddress()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "block_prune_interval"
     */
    public function testPropertyBlockPruneInterval()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_transactions_per_block"
     */
    public function testPropertyMaxTransactionsPerBlock()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
