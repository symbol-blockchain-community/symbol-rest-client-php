<?php
/**
 * NamespaceNetworkPropertiesDTOTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SymbolRestClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace SymbolRestClient\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * NamespaceNetworkPropertiesDTOTest Class Doc Comment
 *
 * @category    Class
 * @description NamespaceNetworkPropertiesDTO
 * @package     SymbolRestClient
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class NamespaceNetworkPropertiesDTOTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "NamespaceNetworkPropertiesDTO"
     */
    public function testNamespaceNetworkPropertiesDTO()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_name_size"
     */
    public function testPropertyMaxNameSize()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_child_namespaces"
     */
    public function testPropertyMaxChildNamespaces()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_namespace_depth"
     */
    public function testPropertyMaxNamespaceDepth()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "min_namespace_duration"
     */
    public function testPropertyMinNamespaceDuration()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_namespace_duration"
     */
    public function testPropertyMaxNamespaceDuration()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "namespace_grace_period_duration"
     */
    public function testPropertyNamespaceGracePeriodDuration()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "reserved_root_namespace_names"
     */
    public function testPropertyReservedRootNamespaceNames()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "namespace_rental_fee_sink_address"
     */
    public function testPropertyNamespaceRentalFeeSinkAddress()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "root_namespace_rental_fee_per_block"
     */
    public function testPropertyRootNamespaceRentalFeePerBlock()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "child_namespace_rental_fee"
     */
    public function testPropertyChildNamespaceRentalFee()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
